}
#} else {
#  tot_ml_under2 <- NA
#cum6 <- NA
#}
#ml_2to3
if  (!any(is.na(sub$ml_2to3[i])) & sum(sub$ml_2to3[i]) > 0) {
cumdata      <- tail(sub$ml_2to3, n=4)  # cumulative values for that diameter class
tx           <- c(10,20,30,40)           # cumulative time steps in minutes
cum7         <- cumsum(cumdata)
if(logtransform==F){
P            <- nls(cum7 ~ a * tx^b, start=list(a=1, b=1), control = nls.control(maxiter=1000, warnOnly=T))
tot_ml_2to3 <- coef(P)[1] * (100)^(coef(P)[2])
}else{
P_log        <- lm(log(cum7) ~ log(tx))
tot_ml_2to3 <- exp(coefficients(P_log)[1]) * (100)^(coefficients(P_log)[2])
}
} else {
tot_ml_2to3 <- NA
#cum7 <- NA
}
#ml_3to4
if  (!any(is.na(sub$ml_3to4[i])) & sum(sub$ml_3to4[i]) > 0) {
cumdata      <- tail(sub$ml_3to4, n=4)  # cumulative values for that diameter class
tx           <- c(10,20,30,40)           # cumulative time steps in minutes
cum8         <- cumsum(cumdata)
if(logtransform==F){
P            <- nls(cum8 ~ a * tx^b, start=list(a=1, b=1), control = nls.control(maxiter=1000, warnOnly=T))
tot_ml_3to4  <- coef(P)[1] * (100)^(coef(P)[2])
}else{
P_log        <- lm(log(cum8) ~ log(tx))
tot_ml_3to4  <- exp(coefficients(P_log)[1]) * (100)^(coefficients(P_log)[2])
}
} else {
tot_ml_3to4 <- NA
#cum8 <- NA
}
#ml_4to5
if  (!any(is.na(sub$ml_4to5[i])) & sum(sub$ml_4to5[i]) > 0) {
cumdata      <- tail(sub$ml_4to5, n=4)  # cumulative values for that diameter class
tx           <- c(10,20,30,40)           # cumulative time steps in minutes
cum8         <- cumsum(cumdata)
if(logtransform==F){
P            <- nls(cum8 ~ a * tx^b, start=list(a=1, b=1), control = nls.control(maxiter=1000, warnOnly=T))
tot_ml_4to5  <- coef(P)[1] * (100)^(coef(P)[2])
}else{
P_log        <- lm(log(cum8) ~ log(tx))
tot_ml_4to5  <- exp(coefficients(P_log)[1]) * (100)^(coefficients(P_log)[2])
}
} else {
tot_ml_4to5 <- NA
#cum8 <- NA
}
#ml_above5
if  (!any(is.na(sub$ml_above5[i])) & sum(sub$ml_above5[i]) > 0) {
cumdata      <- tail(sub$ml_above5, n=4)  # cumulative values for that diameter class
tx           <- c(10,20,30,40)           # cumulative time steps in minutes
cum9         <- cumsum(cumdata)
if(logtransform==F){
P            <- nls(cum9 ~ a * tx^b, start=list(a=1, b=1), control = nls.control(maxiter=1000, warnOnly=T))
tot_ml_above5  <- coef(P)[1] * (100)^(coef(P)[2])
}else{
P_log        <- lm(log(cum9) ~ log(tx))
tot_ml_above5  <- exp(coefficients(P_log)[1]) * (100)^(coefficients(P_log)[2])
}
} else {
tot_ml_above5 <- NA
#cum9 <- NA
}
xx       <- rbind(xx, id)
aa       <- rbind(aa, tot_olunder2)
bb       <- rbind(bb, tot_ol_2to3)
cc       <- rbind(cc, tot_ol_3to4)
dd       <- rbind(dd, tot_ol_4to5)
ee       <- rbind(ee, tot_ol_above5)
ff       <- rbind(ff, tot_ml_under2)
gg       <- rbind(gg, tot_ml_2to3)
hh       <- rbind(hh, tot_ml_3to4)
ii       <- rbind(ii, tot_ml_4to5)
jj       <- rbind(jj, tot_ml_above5)
}
################## TEMPORARY FIX ###########################################
data2a <-  data.frame(xx, as.numeric(as.character(aa)))
colnames(data2a) <- c("this_core", "rootztot")
#############################################################################
}
data2a
as.numeric(as.character(aa))
xx
setwd("/Users/cecile/GitHub/GEMcarbon.R")
dir()
Sys.setlocale('LC_ALL','C')
source("allometric_equations_2014.R")
source("NPPacw_census_function_2014.R")
require(ggplot2)
require(sqldf)
require(lubridate)
setwd("/Users/cecile/Dropbox/GEMcarbondb/db_csv/db_csv_2015/readyforupload_db/acj_pan")
census_ACJ01 <- read.table("census_ACJ_01.csv", header=TRUE, sep=",", na.strings=c("NA", "NaN", ""), dec=".", strip.white=TRUE)
census_PAN02 <- read.table("census_PAN_02.csv", header=TRUE, sep=",", na.strings=c("NA", "NaN", ""), dec=".", strip.white=TRUE)
census_PAN03 <- read.table("census_PAN_03.csv", header=TRUE, sep=",", na.strings=c("NA", "NaN", ""), dec=".", strip.white=TRUE)
wd_chave      <- read.table("wsg.txt", header=TRUE, sep=",", na.strings=c("NA", "NaN", ""), dec=".", strip.white=TRUE)
wsg           <- census_TRU04
setwd("/Users/cecile/Dropbox/GEMcarbondb/db_csv/db_csv_2015/readyforupload_db")
census_TRU04A <- read.table("andesplots_WFR_nov2014_noroots.csv", header=TRUE, sep=",", na.strings=c("NA", "NaN", ""), dec=".", strip.white=TRUE)
wsg           <- census_TRU04
wsg           <- census_TRU04A
find.wsg=function(family, genus, species, wsg){
capply = function(str, ff) {sapply(lapply(strsplit(str, NULL), ff), paste, collapse="") }
cap = function(char) {if (any(ind <- letters==char)) LETTERS[ind]    else char}
capitalize = function(str) {ff <- function(x) paste(lapply(unlist(strsplit(x, NULL)),cap),collapse="")
capply(str,ff)}
lower = function(char) {if (any(ind <- LETTERS==char)) letters[ind]    else char}
lowerize = function(str) {ff <- function(x) paste(lapply(unlist(strsplit(x, NULL)),lower),collapse="")
capply(str,ff)}
family=(as.character(family))
genus=(as.character(genus))
species=(as.character(species))
w=which(is.na(family))
family[w]='unknown'
w=which(is.na(genus))
genus[w]='unknown'
w=which(is.na(species))
species[w]='unknown'
family=capitalize((family))
genus=capitalize((genus))
species=capitalize((species))
family2=capitalize(as.character(wsg$family))
genus2=capitalize(as.character(wsg$genus))
#species2=capitalize(as.character(wsg$specie))  TO DO: what is wrong with this? Doesn't work. is it the () and numbers in the data?
fam.wsg=tapply(wsg$WD.14, family2, mean,na.rm=T)
gen.wsg=tapply(wsg$WD.14, genus2, mean, na.rm=T)
family2=names(fam.wsg)
genus2=names(gen.wsg)
m=match(family, family2)
wsg.est=fam.wsg[m]
m=match(genus, genus2)
w=which(!is.na(m))
wsg.est[w]=gen.wsg[m][w]
#m=match(species, species2) TO DO: fix species2
#w=which(!is.na(m))
#wsg.est[w]=wsg$WSG[m][w]
names(wsg.est)=species
wsg.est
}
family  = census_ACJ01$Family
genus   = census_ACJ01$genus
species = census_ACJ01$species
census_ACJ01$wdensity <- find.wsg(family, genus, species, wsg)
str(census_ACJ01)
h <- cbind(as.numeric(census_ACJ01$Height..2013.1), as.numeric(census_ACJ01$Height..2015.1/1000))
census_ACJ01$height  <- rowMeans(h, na.rm = T)
census_ACJ01$density <- census_ACJ01$wdensity
census_ACJ01$tag     <- as.character(census_ACJ01$Tag.No)
census_ACJ01$plot    <- "ACJ-01"
census_ACJ01$DBH.1   <- (as.numeric(as.character(census_ACJ01$D..2013.1)))/10
census_ACJ01$DBH.2   <- (as.numeric(as.character(census_ACJ01$D..2014.2)))/10
census_ACJ01$DBH.3   <- (as.numeric(as.character(census_ACJ01$D..2015.1)))/10
sapply(census_ACJ01, class)
sqldf("select count(1) from (select distinct tag from census_ACJ01)")
sqldf("select count(1) from census_ACJ01")
# choose a plot
data <- subset(census_ACJ01, plot=="ACJ-01")
date_1 <- as.character("2013/03/15") # don't know - get from William
date_2 <- as.character("2014/03/15") #15 de Marzo 2014
date_3 <- as.character("2015/03/15") #15 de Marzo 2015
date_1 <- as.Date(format(strptime(date_1, format="%Y/%m/%d")))
date_2 <- as.Date(format(strptime(date_2, format="%Y/%m/%d")))
date_3 <- as.Date(format(strptime(date_3, format="%Y/%m/%d")))
census_interval_1 <- as.numeric(difftime(date_2, date_1, units="days"))
census_interval_yrs_1 <- census_interval_1/365
census_interval_2 <- as.numeric(difftime(date_3, date_2, units="days"))
census_interval_yrs_2 <- census_interval_2/365
data$dbh_growth_yr <- (data$DBH.2 - data$DBH.1)/census_interval_yrs_1
gr_sd <- sd(data$dbh_growth_yr, na.rm=T)
plot1 <- ggplot(data=data, aes(x=DBH.1, y=dbh_growth_yr, na.rm=T)) +
geom_point() +
ylim(-10, 10) +
ggtitle(data$plot)
plot1
w = which(is.na(data$DBH.1) & !is.na(data$DBH.2))
data$DBH.2[w] = 0/0
data$recruits <- "ok"
data$recruits[w] <- "recruit"
w = which(is.na(data$DBH.1) & is.na(data$DBH.2) & !is.na(data$DBH.3))
data$DBH.3[w] = 0/0
data$recruits[w] <- "recruit"
# Do not allow for shrinking trees. We allow shrinkage of 10%.
w = which(data$DBH.1 > data$DBH.2 + (data$DBH.1*0.1))
data$DBH.2[w] = data$DBH.1[w]
data$srink <- "ok"
data$srink[w] <- "shrunk.dbh.2"
w = which(data$DBH.2 > data$DBH.3 + (data$DBH.2*0.1))
data$DBH.3[w] = data$DBH.2[w]
data$srink[w] <- "shrunk.dbh.3"
# replace missing values in the middle of the census
w = which(!is.na(data$DBH.1) & is.na(data$DBH.2) & !is.na(data$DBH.3))
data$DBH.2[w] = (data$DBH.1[w] + data$DBH.3[w])/2        # mean rather than meadian flag this as 8 - see RAINFOR flags.
data$missing <- "ok"
data$missing[w] <- "missing"
# Define the maximum interval you would like to allow per year (e.g. 5 cm), or use the default 3SD.
maxincrement_1 <- 5 * census_interval_yrs_1 #(3*gr_sd)
maxincrement_2 <- 5 * census_interval_yrs_2 #(3*gr_sd)
w = which((data$DBH.2 - data$DBH.1) >= maxincrement_1)
data$overgrown <- "ok"
data$overgrown[w] <- ">2cm growth per yr dbh.2"
data$value_replaced <- NA
data$value_replaced[w] <- data$DBH.2[w]
data$DBH.2[w] = (data$DBH.1[w] + maxincrement_1)
w = which((data$DBH.3 - data$DBH.2) >= maxincrement_2)
data$overgrown[w] <- ">2cm growth per yr dbh.3"
data$value_replaced[w] <- data$DBH.3[w]
data$DBH.3[w] = (data$DBH.2[w] + maxincrement_2)
# Flag duplicate trees
n_occur <- data.frame(table(data$tag))
n_occur[n_occur$Freq > 1,]
data[data$tag %in% n_occur$Var1[n_occur$Freq > 1],]
## STOP ##
# Delete duplicate trees?
# data <- data[data$tag!=570.2 & data$X2009!=13.0, ]
# Standardise NAs
data[is.na(data)] <- NA
# PAN-02
# add wood density - get wood density from William Farfan's census data 2015.
family  = census_PAN02$family
genus   = census_PAN02$genus
species = census_PAN02$species
census_PAN02$wdensity <- find.wsg(family, genus, species, wsg)
# re-format
str(census_PAN02)
h <- cbind(as.numeric(census_PAN02$Height..2013.2), as.numeric(census_PAN02$Height..2015.1/1000))
census_PAN02$height  <- rowMeans(h, na.rm = T)
census_PAN02$density <- census_PAN02$wdensity
census_PAN02$tag     <- as.character(census_PAN02$Tag.No)
census_PAN02$plot    <- "PAN-02"
census_PAN02$DBH.1   <- (as.numeric(as.character(census_PAN02$D..2013.2)))/10
census_PAN02$DBH.2   <- (as.numeric(as.character(census_PAN02$D..2015.1)))/10
sapply(census_PAN02, class)
# check the number of distinct tags in each df
sqldf("select count(1) from (select distinct tag from census_PAN02)")
sqldf("select count(1) from census_PAN02")
# choose a plot
dataPAN02 <- subset(census_PAN02, plot=="PAN-02")
date_1 <- as.character("2013/03/06")
date_2 <- as.character("2015/03/06") # PAN 02 06 Marzo 2015
date_1 <- as.Date(format(strptime(date_1, format="%Y/%m/%d")))
date_2 <- as.Date(format(strptime(date_2, format="%Y/%m/%d")))
census_interval_1 <- as.numeric(difftime(date_2, date_1, units="days"))
census_interval_yrs_1 <- census_interval_1/365
dataPAN02$dbh_growth_yr <- (dataPAN02$DBH.2 - dataPAN02$DBH.1)/census_interval_yrs_1
gr_sd <- sd(dataPAN02$dbh_growth_yr, na.rm=T)
plot1 <- ggplot(data=dataPAN02, aes(x=DBH.1, y=dbh_growth_yr, na.rm=T)) +
geom_point() +
ylim(-10, 10) +
ggtitle(dataPAN02$plot)
plot1
w = which(is.na(dataPAN02$DBH.1) & !is.na(dataPAN02$DBH.2))
dataPAN02$DBH.2[w] = 0/0
dataPAN02$recruits <- "ok"
dataPAN02$recruits[w] <- "recruit"
w = which(is.na(dataPAN02$DBH.1) & is.na(dataPAN02$DBH.2) & !is.na(dataPAN02$DBH.3))
dataPAN02$DBH.3[w] = 0/0
dataPAN02$recruits[w] <- "recruit"
# Do not allow for shrinking trees. We allow shrinkage of 10%.
w = which(dataPAN02$DBH.1 > dataPAN02$DBH.2 + (dataPAN02$DBH.1*0.1))
dataPAN02$DBH.2[w] = dataPAN02$DBH.1[w]
dataPAN02$srink <- "ok"
dataPAN02$srink[w] <- "shrunk.dbh.2"
w = which(dataPAN02$DBH.2 > dataPAN02$DBH.3 + (dataPAN02$DBH.2*0.1))
dataPAN02$DBH.3[w] = dataPAN02$DBH.2[w]
dataPAN02$srink[w] <- "shrunk.dbh.3"
# replace missing values in the middle of the census
w = which(!is.na(dataPAN02$DBH.1) & is.na(dataPAN02$DBH.2) & !is.na(dataPAN02$DBH.3))
dataPAN02$DBH.2[w] = (dataPAN02$DBH.1[w] + dataPAN02$DBH.3[w])/2        # mean rather than meadian flag this as 8 - see RAINFOR flags.
dataPAN02$missing <- "ok"
dataPAN02$missing[w] <- "missing"
# Define the maximum interval you would like to allow per year (e.g. 5 cm), or use the default 3SD.
maxincrement_1 <- 5 * census_interval_yrs_1 #(3*gr_sd)
maxincrement_2 <- 5 * census_interval_yrs_2 #(3*gr_sd)
w = which((dataPAN02$DBH.2 - dataPAN02$DBH.1) >= maxincrement_1)
dataPAN02$overgrown <- "ok"
dataPAN02$overgrown[w] <- ">2cm growth per yr dbh.2"
dataPAN02$value_replaced <- NA
dataPAN02$value_replaced[w] <- dataPAN02$DBH.2[w]
dataPAN02$DBH.2[w] = (dataPAN02$DBH.1[w] + maxincrement_1)
w = which((dataPAN02$DBH.3 - dataPAN02$DBH.2) >= maxincrement_2)
dataPAN02$overgrown[w] <- ">2cm growth per yr dbh.3"
dataPAN02$value_replaced[w] <- dataPAN02$DBH.3[w]
dataPAN02$DBH.3[w] = (dataPAN02$DBH.2[w] + maxincrement_2)
# Flag duplicate trees
n_occur <- data.frame(table(dataPAN02$tag))
n_occur[n_occur$Freq > 1,]
dataPAN02[dataPAN02$tag %in% n_occur$Var1[n_occur$Freq > 1],]
# Delete duplicate trees?
dataPAN02 <- dataPAN02[dataPAN02$tag!="798.4A" & dataPAN02$height!=20, ]
# Standardise NAs
dataPAN02[is.na(dataPAN02)] <- NA
family  = census_PAN03$family
genus   = census_PAN03$genus
species = census_PAN03$species
census_PAN03$wdensity <- find.wsg(family, genus, species, wsg)
# re-format
str(census_PAN03)
h <- cbind(as.numeric(census_PAN03$Height..2013.2), as.numeric(census_PAN03$Height..2014.2), as.numeric(census_PAN03$Height..2015.2/1000))
census_PAN03$height  <- rowMeans(h, na.rm = T)
census_PAN03$density <- census_PAN03$wdensity
census_PAN03$tag     <- as.character(census_PAN03$Tag.No)
census_PAN03$plot    <- "PAN-03"
census_PAN03$DBH.1   <- (as.numeric(as.character(census_PAN03$D..2013.2)))/10
census_PAN03$DBH.2   <- (as.numeric(as.character(census_PAN03$D..2014.2)))/10
census_PAN03$DBH.3   <- (as.numeric(as.character(census_PAN03$D..2015.2)))/10
sapply(census_PAN03, class)
# check the number of distinct tags in each df
sqldf("select count(1) from (select distinct tag from census_PAN03)")
sqldf("select count(1) from census_PAN03")
#***********************************************************
#******************* Clean census data *********************
#***********************************************************
# choose a plot
dataPAN03 <- subset(census_PAN03, plot=="PAN-03")
# define start and end date:
date_1 <- as.character("2013/03/05") # ??
date_2 <- as.character("2014/03/05") # ??
date_3 <- as.character("2015/03/05") # PAN 03 05 Marzo 2015
date_1 <- as.Date(format(strptime(date_1, format="%Y/%m/%d")))
date_2 <- as.Date(format(strptime(date_2, format="%Y/%m/%d")))
date_3 <- as.Date(format(strptime(date_3, format="%Y/%m/%d")))
census_interval_1 <- as.numeric(difftime(date_2, date_1, units="days"))
census_interval_yrs_1 <- census_interval_1/365
census_interval_2 <- as.numeric(difftime(date_3, date_2, units="days"))
census_interval_yrs_2 <- census_interval_2/365
dataPAN03$dbh_growth_yr <- (dataPAN03$DBH.2 - dataPAN03$DBH.1)/census_interval_yrs_1
gr_sd <- sd(dataPAN03$dbh_growth_yr, na.rm=T)
plot1 <- ggplot(data=dataPAN03, aes(x=DBH.1, y=dbh_growth_yr, na.rm=T)) +
geom_point() +
ylim(-10, 10) +
ggtitle(dataPAN03$plot)
plot1
w = which(is.na(dataPAN03$DBH.1) & !is.na(dataPAN03$DBH.2))
dataPAN03$DBH.2[w] = 0/0
dataPAN03$recruits <- "ok"
dataPAN03$recruits[w] <- "recruit"
w = which(is.na(dataPAN03$DBH.1) & is.na(dataPAN03$DBH.2) & !is.na(dataPAN03$DBH.3))
dataPAN03$DBH.3[w] = 0/0
dataPAN03$recruits[w] <- "recruit"
# Do not allow for shrinking trees. We allow shrinkage of 10%.
w = which(dataPAN03$DBH.1 > dataPAN03$DBH.2 + (dataPAN03$DBH.1*0.1))
dataPAN03$DBH.2[w] = dataPAN03$DBH.1[w]
dataPAN03$srink <- "ok"
dataPAN03$srink[w] <- "shrunk.dbh.2"
w = which(dataPAN03$DBH.2 > dataPAN03$DBH.3 + (dataPAN03$DBH.2*0.1))
dataPAN03$DBH.3[w] = dataPAN03$DBH.2[w]
dataPAN03$srink[w] <- "shrunk.dbh.3"
# replace missing values in the middle of the census
w = which(!is.na(dataPAN03$DBH.1) & is.na(dataPAN03$DBH.2) & !is.na(dataPAN03$DBH.3))
dataPAN03$DBH.2[w] = (dataPAN03$DBH.1[w] + dataPAN03$DBH.3[w])/2        # mean rather than meadian flag this as 8 - see RAINFOR flags.
dataPAN03$missing <- "ok"
dataPAN03$missing[w] <- "missing"
# Define the maximum interval you would like to allow per year (e.g. 5 cm), or use the default 3SD.
maxincrement_1 <- 5 * census_interval_yrs_1 #(3*gr_sd)
maxincrement_2 <- 5 * census_interval_yrs_2 #(3*gr_sd)
w = which((dataPAN03$DBH.2 - dataPAN03$DBH.1) >= maxincrement_1)
dataPAN03$overgrown <- "ok"
dataPAN03$overgrown[w] <- ">2cm growth per yr dbh.2"
dataPAN03$value_replaced <- NA
dataPAN03$value_replaced[w] <- dataPAN03$DBH.2[w]
dataPAN03$DBH.2[w] = (dataPAN03$DBH.1[w] + maxincrement_1)
w = which((dataPAN03$DBH.3 - dataPAN03$DBH.2) >= maxincrement_2)
dataPAN03$overgrown[w] <- ">2cm growth per yr dbh.3"
dataPAN03$value_replaced[w] <- dataPAN03$DBH.3[w]
dataPAN03$DBH.3[w] = (dataPAN03$DBH.2[w] + maxincrement_2)
# Flag duplicate trees
n_occur <- data.frame(table(dataPAN03$tag))
n_occur[n_occur$Freq > 1,]
data[dataPAN03$tag %in% n_occur$Var1[n_occur$Freq > 1],]
# Delete duplicate trees?
# data <- data[data$tag!="798.4A" & data$height!=20, ]
# Standardise NAs
dataPAN03[is.na(dataPAN03)] <- NA
# dataPAN02 has a row of NAs, remove it like this:
dataPAN02B <- dataPAN02[-580,]
eltrcensus <- dataPAN02B
# dataPAN03
eltrcensus <- dataPAN03
# dataTRU04
eltrcensus <- dataTRU04
# column names should be
# ("plot", "sp", "tag", "dbh", "height", "density", "year", "month", "day", "plot_code")
# From Darcy
# PLOT  2013	2014	2015
# ACJ-01	 	15-Mar-2014	16-Mar-2015
# PAN-02	 	No census	2-Mar-2015
# PAN-03	30-Mar-2013	22-Mar-2014	4-Mar-2015
# Add dates to eltrcensus.
# 1st census
yearDAP1   <- c()
monthDAP1  <- c()
dayDAP1    <- c()
for (ii in 1:(length(eltrcensus$plot))) {  # length(eltrcensus$plot) is equivalent to nrow(eltrcensus)
yeartmp  = NA
monthtmp = NA
daytmp   = NA
# cat("At row",i,"=",eltrcensus$plot[i]) # this is to print the number of row and the value in that row
if (as.character(eltrcensus$plot[ii]) == "ACJ-01") {
yeartmp  = 2013
monthtmp = 03
daytmp   = 15
}
if (as.character(eltrcensus$plot[ii]) == "PAN-02") {
yeartmp  = 2013
monthtmp = 01
daytmp   = 01
}
if (as.character(eltrcensus$plot[ii]) == "PAN-03") {
yeartmp  = 2013
monthtmp = 01
daytmp   = 01
}
if (as.character(eltrcensus$plot[ii]) == "TRU-04") {
yeartmp  = 2003
monthtmp = 07
daytmp   = 14
}
yearDAP1  = c(yearDAP1,yeartmp)
monthDAP1 = c(monthDAP1,monthtmp)
dayDAP1   = c(dayDAP1,daytmp)
datesDAP1 = data.frame(yearDAP1, monthDAP1, dayDAP1)
datesDAP1 = data.frame(datesDAP1[1,], eltrcensus$plot, row.names = NULL) # Make sure this is the right number of rows.
colnames(datesDAP1) <- c("year", "month", "day", "plot")
}
# 2nd census
yearDAP2   <- NULL   # same as yearDAP2 = c()
monthDAP2  <- NULL
dayDAP2    <- NULL
for (ii in 1:(length(eltrcensus$plot))) {  #length(eltrcensus$plot) is equivalent to nrow(eltrcensus)
yeartmp  = NA
monthtmp = NA
daytmp   = NA
# cat("At row",i,"=",eltrcensus$plot[i]) this is to print the number of row and the value in that row
if (as.character(eltrcensus$plot[ii]) == "ACJ-01") {
yeartmp  = 2014
monthtmp = 03
daytmp   = 15
}
if (as.character(eltrcensus$plot[ii]) == "PAN-02") {
yeartmp  = 2014
monthtmp = 01
daytmp   = 01
}
if (as.character(eltrcensus$plot[ii]) == "PAN-03") {
yeartmp  = 2014
monthtmp = 01
daytmp   = 01
}
if (as.character(eltrcensus$plot[ii]) == "TRU-04") {
yeartmp  = 2007
monthtmp = 06
daytmp   = 08
}
yearDAP2  = c(yearDAP2,yeartmp)
monthDAP2 = c(monthDAP2,monthtmp)
dayDAP2   = c(dayDAP2,daytmp)
datesDAP2 = data.frame(yearDAP2, monthDAP2, dayDAP2)
datesDAP2 = data.frame(datesDAP2[1,], eltrcensus$plot, row.names = NULL)
colnames(datesDAP2) <- c("year", "month", "day", "plot")
}
# 3rd census
yearDAP3   <- NULL   # same as yearDAP2 = c()
monthDAP3  <- NULL
dayDAP3    <- NULL
for (ii in 1:(length(eltrcensus$plot))) {  #length(eltrcensus$plot) is equivalent to nrow(eltrcensus)
yeartmp  = NA
monthtmp = NA
daytmp   = NA
# cat("At row",i,"=",eltrcensus$plot[i]) this is to print the number of row and the value in that row
if (as.character(eltrcensus$plot[ii]) == "ACJ-01") {
yeartmp  = 2015
monthtmp = 03
daytmp   = 15
}
if (as.character(eltrcensus$plot[ii]) == "PAN-02") {
yeartmp  = 2015
monthtmp = 03
daytmp   = 06
}
if (as.character(eltrcensus$plot[ii]) == "PAN-03") {
yeartmp  = 2015
monthtmp = 03
daytmp   = 05
}
if (as.character(eltrcensus$plot[ii]) == "TRU-04") {
yeartmp  = 2011
monthtmp = 07
daytmp   = 30
}
yearDAP3  = c(yearDAP3,yeartmp)
monthDAP3 = c(monthDAP3,monthtmp)
dayDAP3   = c(dayDAP3,daytmp)
datesDAP3 = data.frame(yearDAP3, monthDAP3, dayDAP3)
datesDAP3 = data.frame(datesDAP3[1,], eltrcensus$plot, row.names = NULL)
colnames(datesDAP3) <- c("year", "month", "day", "plot")
}
eltrcen1 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.1, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP1)
eltrcen2 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.2, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP2)
eltrcen3 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.3, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP3)
census <- rbind(eltrcen1, eltrcen2, eltrcen3)
census$height_m <- as.numeric(census$height_m)
sapply(census, class)
acj_01A  <- NPPacw_census(census, plotname="ACJ-01", allometric_option="Default", height_correction_option="Default", census1_year=2013, census2_year=2014)
acj_01B  <- NPPacw_census(census, plotname="ACJ-01", allometric_option="Default", height_correction_option="Default", census1_year=2014, census2_year=2015)
acj_01A  <- NPPacw_census(census, plotname="ACJ-01", allometric_option="Default", height_correction_option="Default", census1_year=2013, census2_year=2014)
acj_01B  <- NPPacw_census(census, plotname="ACJ-01", allometric_option="Default", height_correction_option="Default", census1_year=2014, census2_year=2015)
