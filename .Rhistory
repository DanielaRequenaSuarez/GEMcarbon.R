}
# data2a <- data.frame(cbind(xx, as.numeric(as.character(aa)), as.numeric(as.character(bb)), as.numeric(as.character(cc)), as.numeric(as.character(dd)), as.numeric(as.character(ee)), as.numeric(as.character(ff)), as.numeric(as.character(gg)), as.numeric(as.character(hh)), as.numeric(as.character(ii)), as.numeric(as.character(jj))))
# colnames(data2a) <- c("this_core", "tot_olunder2", "tot_ol2to3", "tot_ol3to4", "tot_ol4to5", "tot_olabove5", "tot_mlunder2", "tot_ml2to3", "tot_ml3to4", "tot_ml4to5", "tot_mlabove5")
#
} else if (option==2) {
# see NPProot_2015.R code for details. Just in case someone has another timestep structure.
}
# colnames in database:
# plot_code
# year
# month
# day
# ingrowth_core_num
# is_stock_yn
# ingrowth_core_litterfall_g
# soil_humidity_pcnt
# soil_temperature_c
# ol_layer_depth_cm
# ml_layer_depth_cm
# time_step
# time_step_minutes
# ol_under_2mm_g
# ml_under_2mm_g
# ol_2to3_mm_g
# ml_2to3_mm_g
# ol_3to4_mm_g
# ml_3to4_mm_g
# ol_4to5_mm_g
# ml_4to5_mm_g
# ol_above_5mm_g
# ml_above_5mm_g
# quality_code
# comments
### Read test data:
#setwd("C:/Users/Cecile/Dropbox/NPPflux/db_csv")
#data.ic <- read.table("C:/Users/Cecile/Dropbox/Carbon_Use_Efficieny_R/testing/ICEltr_samtest.csv", sep=",", header=T)
datadir = "a_readyforupload_db/acj_pan_2015/"
testfile = "ingrowth_core_ACJ-01_2013_2104_nostock.csv"
data.ic = read.csv(paste0(datadir,testfile), na.strings = c("NA", "NaN"))
mean_exponents = c("ACJ-01" = 0.5)
solve_for_a <- function(cum, tx, b) {
# Fit the curve through the final
#   point (x,y = tx, cum) with a site-mean exponent (b, perhaps per size-class), solving for linear slope (a).
#   For example, cum1 ~ a * tx^b.  Thus, a = cum1/tx^b.
a = cum[length(cum)]/tx[length(tx)]^b
}
extrapolate_failed_model <- function(cum, tx, b, mins = 100) {
a = solve_for_a(cum, tx, b)
cum_tot = a * mins^b
return(cum_tot)
}
coef_func = ifelse(logtransform, coef, coefficients) # nls & lm have different methods for extracting coefs.  use this when testing exponent > 1
calc_roots <- function(core_data, root_type, plotname, tx = c(10,20,30,40), mins = 100, logmodel = T) {
# subset core data before passing in.  E.g. sub <- subset(data, subset=(data$this_core == uid[i]))
coef_func = ifelse(logmodel, coef, coefficients) # nls & lm have different methods for extracting coefs.  use this when testing exponent > 1
if  (!any(is.na(core_data[,root_type])) & sum(core_data[,root_type]) > 0) {
cumdata      <- tail(core_data[,root_type], n=length(tx)) # cumulative values for that diameter class
#tx           <- c(10,20,30,40)           # cumulative time steps in minutes WE SHOULD USE data.ic$time_step_cum
cum          <- cumsum(cumdata)
if(cum[1] == 0) {                       # make sure we find some roots in first sample.  Otherwise, log models blow up.
tot_roots = extrapolate_failed_model(cum, tx, mean_exponents[plotname], mins = mins)
} else {
if(logmodel) {
P_log <- lm(log(cum) ~ log(tx))
tot_roots <- exp(coefficients(P_log)[1]) * (100)^(coefficients(P_log)[2])  # We use the same method as Khoon & Terhi (120 mins and log-curve as default).
} else {
P <- nls(cum ~ a * tx^b, start=list(a=1, b=1), control = nls.control(maxiter=1000, warnOnly=T))
tot_roots <- coef(P)[1] * (100)^(coef(P)[2])  # Chris used 100 mins and power law, but here we use 120 min (Khoon & Terhi).
}
if(coef_func(P_log)[2] > 1) {         # make sure accumulation of roots is declining with time
tot_roots = extrapolate_failed_model(cum, tx, mean_exponents[plotname], mins = 100)
}
}
} else {
tot_roots <- NA
}
return(tot_roots)
}
## adjust options:
plotname = "ACJ-01"
option = 1
logtransform = T
fine_root_cor <- "Default"
tubed = 0.07  ## diameter of tube
# ### adjust options, with time step option 2:
# plotname = "ANK-01"
# option = 1
# logtransform = T
# fine_root_cor <- "Default"
# tubed = 0.07  ## diameter of tube
# The function starts here.
#NPProot_ic <- function(data.ic, plotname, option = 1, logtransform = T, fine_root_cor = "Default", tubed = 0.07, ret = "monthly.means.ts", plotit = F) {
# load packages
library(sqldf)
require(ggplot2)
library(scales)
library(nlme)
data <- subset(subset(data.ic, plot_code == plotname))
# re-name columns rather than building new ones?
data$ol_under2 <- data$ol_under_2mm_g
data$ol_2to3   <- data$ol_2to3_mm_g
data$ol_3to4   <- data$ol_3to4_mm_g
data$ol_4to5   <- data$ol_4to5_mm_g
data$ol_above5 <- data$ol_above_5mm_g
data$ml_under2 <- data$ml_under_2mm_g
data$ml_2to3   <- data$ml_2to3_mm_g
data$ml_3to4   <- data$ml_3to4_mm_g
data$ml_4to5   <- data$ml_4to5_mm_g
data$ml_above5 <- data$ml_above_5mm_g
data$time_step_cum <- data$time_step*data$time_step_minutes # get cumulative time step
## TO DO: We should add sanity checks for the input data here.
# Replace NAs by 0
data$ol_under2[is.na(data$ol_under2)] <- 0
data$ol_2to3[is.na(data$ol_2to3)]     <- 0
data$ol_3to4[is.na(data$ol_3to4)]     <- 0
data$ol_4to5[is.na(data$ol_4to5)]     <- 0
data$ol_above5[is.na(data$ol_above5)] <- 0
data$ml_under2[is.na(data$ml_under2)] <- 0
data$ml_2to3[is.na(data$ml_2to3)]     <- 0
data$ml_3to4[is.na(data$ml_3to4)]     <- 0
data$ml_4to5[is.na(data$ml_4to5)]     <- 0
data$ml_above5[is.na(data$ml_above5)] <- 0
data$this_core <- (paste(as.character(data$year),as.character(data$month),as.character(data$day),as.character(data$ingrowth_core_num), sep="-"))
#dim(data)
if (option == 1) {
uid <- unique(data$this_core)
xx <- c()
aa <- c()
bb <- c()
cc <- c()
dd <- c()
ee <- c()
ff <- c()
gg <- c()
hh <- c()
ii <- c()
jj <- c()
# TODO: Test for initial 0's and for exponent (b or coef) > 1.  If either of these happen, then fit the curve through the final
#   point (x,y = tx, cum) with a site-mean exponent (b, perhaps per size-class), solving for linear slope (a).
#   For example, cum1 ~ a * tx^b.  Thus, a = cum1/tx^b.  Then extrapolate to 100 minutes.
for (i in 1:length(uid)) {
sub          <- subset(data, subset=(data$this_core == uid[i]))
id           <- tail(sub$this_core, n=1)
#ol_under2
tot_olunder2 = calc_roots(sub, "ol_under2", plotname)
#ol_2to3
tot_ol2to3 = calc_roots(sub, "ol_2to3", plotname)
#ol_3to4
tot_ol3to4 = calc_roots(sub, "ol_3to4", plotname)
#ol_4to5
tot_ol4to5 = calc_roots(sub, "ol_4to5", plotname)
#ol_above5
tot_olabove5 = calc_roots(sub, "ol_above5", plotname)
#ml_under2
tot_mlunder2 = calc_roots(sub, "ml_under2", plotname)
#ml_2to3
tot_ml2to3 = calc_roots(sub, "ml_2to3", plotname)
#ml_3to4
tot_ml3to4 = calc_roots(sub, "ml_3to4", plotname)
#ml_4to5
tot_ml4to5 = calc_roots(sub, "ml_4to5", plotname)
#ml_above5
tot_mlabove5 = calc_roots(sub, "ml_above5", plotname)
xx       <- rbind(xx, id) # use this
aa       <- rbind(aa, tot_olunder2) # use this
bb       <- rbind(bb, tot_ol2to3)
cc       <- rbind(cc, tot_ol3to4)
dd       <- rbind(dd, tot_ol4to5)
ee       <- rbind(ee, tot_olabove5)
ff       <- rbind(ff, tot_mlunder2) # use this
gg       <- rbind(gg, tot_ml2to3)
hh       <- rbind(hh, tot_ml3to4)
ii       <- rbind(ii, tot_ml4to5)
jj       <- rbind(jj, tot_mlabove5)
}
data2a <- data.frame(cbind(xx, as.numeric(as.character(aa)), as.numeric(as.character(bb)), as.numeric(as.character(cc)), as.numeric(as.character(dd)), as.numeric(as.character(ee)), as.numeric(as.character(ff)), as.numeric(as.character(gg)), as.numeric(as.character(hh)), as.numeric(as.character(ii)), as.numeric(as.character(jj))))
colnames(data2a) <- c("this_core", "tot_olunder2", "tot_ol2to3", "tot_ol3to4", "tot_ol4to5", "tot_olabove5", "tot_mlunder2", "tot_ml2to3", "tot_ml3to4", "tot_ml4to5", "tot_mlabove5")
} else if (option==2) {
# see NPProot_2015.R code for details. Just in case someone has another timestep structure.
}
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
plot1
data2a
data3
data3
data4
data4_pertube <- sqldf("SELECT data3.year, data3.month, data3.day, AVG(data3.ic_MgCha), STDEV(data3.ic_MgCha) FROM data3 GROUP BY data3.month, data3.this_core")
data4_pertube
data4_pertube <- sqldf("SELECT data3.this_core, data3.year, data3.month, data3.day, AVG(data3.ic_MgCha) FROM data3 GROUP BY data3.month, data3.this_core")
data4_pertube
colnames(data4_pertube) <- c("this_core", "year", "month", "day", "threemonthlyNPProot")
data4_pertube
data4_pertube$d     <- as.character(paste(data4$month, data4$day, data4$year, sep="/"))
data4_pertube$date  <- as.Date(data4$d, "%m/%d/%Y")
data4_pertube <- sqldf("SELECT data4.* FROM data4 ORDER BY data4.year, data4.month, data4.day ASC")
data4_pertube
data4_pertube <- sqldf("SELECT data3.this_core, data3.year, data3.month, data3.day, AVG(data3.ic_MgCha) FROM data3 GROUP BY data3.month, data3.this_core")
colnames(data4_pertube) <- c("this_core", "year", "month", "day", "threemonthlyNPProot")
data4_pertube$d     <- as.character(paste(data4$month, data4$day, data4$year, sep="/"))
data4_pertube$date  <- as.Date(data4$d, "%m/%d/%Y")
data4_pertube <- sqldf("SELECT data4_pertube.* FROM data4_pertube ORDER BY data4_pertube.year, data4_pertube.month, data4_pertube.day ASC")
data4_pertube
data4_pertube
c_time <- as.POSIXlt(data4_pertube$date)
c_time <- rev(c_time)
tt <- difftime(c_time[1:(length(c_time)-1)] , c_time[2:length(c_time)]) # this gets the collection interval
data4_pertube$interval <- c(90, tt)  # I add 90 days as first collection interval. You can change this.
data4_pertube$monthlyNPProot    <- (as.numeric(data4_pertube$threemonthlyNPProot)/data4_pertube$interval) * 30 # TO DO: We should change this to the number of days in that month. need a loop.
data4_pertube$monthlyNPProot_se <- ((as.numeric(data4_pertube$threemonthlyNPProot_sd)/sqrt(16))/data4_pertube$interval) * 30
(mean(data4_pertube$monthlyNPProot, na.rm=T))*12
(mean(data4_pertube$monthlyNPProot_se, na.rm=T))*12
data4_pertube
(mean(data4_pertube$monthlyNPProot, na.rm=T))*12
data4_pertube$monthlyNPProot    <- (as.numeric(data4_pertube$threemonthlyNPProot)/data4_pertube$interval) * 30 # TO DO: We should change this to the number of days in that month. need a loop.
data4_pertube$monthlyNPProot
data4_pertube
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
NPProot_ic(paste0(datadir, testfile), "ACJ-01")
data3
source("NPProot_2015.R")
datadir = "a_readyforupload_db/acj_pan_2015/"
testfile = "ingrowth_core_ACJ-01_2013_2104_nostock.csv"
NPProot_ic(paste0(datadir,testfile), "ACJ-01")
roots_acj = NPProot_ic(paste0(datadir,testfile), "ACJ-01")
roots_acj
data3
data.ic
NPProot_ic(paste0(datadir,testfile), "ACJ-01")
data2
sub
aa
tot_mlunder2
data2a
data3 <- sqldf("SELECT data2a.this_core, AVG(data2a.rootztot), data.year, data.month, data.day FROM data2a JOIN data ON data2a.this_core = data.this_core GROUP BY data2a.this_core")
colnames(data3) <- c("this_core","rootztot","year","month","day")
data3
data4
tt
data4_pertube
source("NPProot_2015.R")
datadir = "a_readyforupload_db/acj_pan_2015/"
testfile = "ingrowth_core_ACJ-01_2013_2104_nostock.csv"
roots_acj = NPProot_ic(paste0(datadir,testfile), "ACJ-01")
source("NPProot_2015.R")
roots_acj = NPProot_ic(paste0(datadir,testfile), "ACJ-01")
roots_acj[[2]]
data4_pertube <- sqldf("SELECT data4_pertube.* FROM data4_pertube ORDER BY data4_pertube.this_core, data4_pertube.year, data4_pertube.month, data4_pertube.day ASC")
data4_pertube
?sqldf
mutate(data, persist_id = paste(plotname, ingrowth_core_num))
transform(data, persist_id = paste(plotname, ingrowth_core_num))
data3 <- sqldf("SELECT data2a.this_core, data.persist_id, AVG(data2a.rootztot), data.year, data.month, data.day FROM data2a JOIN data ON data2a.this_core = data.this_core GROUP BY data2a.this_core")
data = transform(data, persist_id = paste(plotname, ingrowth_core_num, sep="_"))
data2a <- data.frame(cbind(xx, as.numeric(as.character(aa)), as.numeric(as.character(bb)), as.numeric(as.character(cc)), as.numeric(as.character(dd)), as.numeric(as.character(ee)), as.numeric(as.character(ff)), as.numeric(as.character(gg)), as.numeric(as.character(hh)), as.numeric(as.character(ii)), as.numeric(as.character(jj))))
data3 <- sqldf("SELECT data2a.this_core, data.persist_id, AVG(data2a.rootztot), data.year, data.month, data.day FROM data2a JOIN data ON data2a.this_core = data.this_core GROUP BY data2a.this_core")
data
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
roots_acj = NPProot_ic(paste0(datadir,testfile), "ACJ-01")
roots_acj
names(roots_acj)
roots_acj[[2]]
?rowwise
library(dplyr)
?rowwise
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
roots_acj = NPProot_ic(paste0(datadir,testfile), "ACJ-01")
data4_pertube %>% group_by(persist_id) %>% order_by(rev(date)) %>% mutate(interval = difftime(date, lag(date)))
head(data4_pertube)
?order_by
data4_pertube %>% group_by(persist_id) %>% order_by(date) %>% mutate(interval = difftime(date, lag(date)))
data4_pertube %>% group_by(persist_id) %>% order_by(as.posix(date)) %>% mutate(interval = difftime(date, lag(date)))
?mutate
data4_pertube %>% group_by(persist_id) %>% order_by(rev(date)) %>% dplyr::mutate(interval = difftime(date, lag(date)))
data4_pertube %>% group_by(persist_id) %>% order_by(rev(date)) %>% dplyr::mutate(interval = difftime(as.POSIXct(date), as.POSIXct(lag(date))))
data4_pertube %>% group_by(persist_id) %>% order_by(rev(as.POSIXct(date))) %>% dplyr::mutate(interval = difftime(as.POSIXct(date), as.POSIXct(lag(date))))
?difftime
data4_pertube %>% group_by(persist_id) %>% order_by(rev(as.POSIXct(date))) %>% dplyr::mutate(interval = as.POSIXct(date) - as.POSIXct(lag(date)))
str(data4_pertube)
data4_pertube$date[1] - data4_pertube$date[2]
difftime(data4_pertube$date[1], data4_pertube$date[2])
difftime(data4_pertube$date[1], data4_pertube$date[4])
difftime(data4_pertube$date[1], data4_pertube$date[10])
as.numeric(difftime(data4_pertube$date[1], data4_pertube$date[10]))
data4_pertube %>% group_by(persist_id) %>% order_by(rev(date)) %>% mutate(interval = as.numeric(difftime(date, lag(date))))
data4_pertube %>% group_by(persist_id)
data4_pertube %>% group_by(persist_id) %>% order_by(rev(date))
data4_pertube %>% group_by(persist_id) %>% order_by(date) %>% mutate(interval = as.numeric(difftime(date, lag(date))))
data4_pertube %>% group_by(persist_id) %>% order_by(date)
data4_pertube %>% group_by(persist_id) %>% order_by(as.POSIXlt(date))
?order_by
?arrange
data4_pertube %>% group_by(persist_id) %>% arrange(rev(date)) %>% mutate(interval = as.numeric(difftime(date, lag(date))))
data4_pertube
data4_pertube <- sqldf("SELECT data3.persist_id, data3.year, data3.month, data3.day, AVG(data3.ic_MgCha) FROM data3 GROUP BY data3.year, data3.month, data3.persist_id")
colnames(data4_pertube) <- c("persist_id", "year", "month", "day", "threemonthlyNPProot")
data4_pertube$d     <- as.character(paste(data4_pertube$month, data4_pertube$day, data4_pertube$year, sep="/"))
data4_pertube$date  <- as.Date(data4_pertube$d, "%m/%d/%Y")
data4_pertube <- sqldf("SELECT data4_pertube.* FROM data4_pertube ORDER BY data4_pertube.persist_id, data4_pertube.year, data4_pertube.month, data4_pertube.day ASC")
data4_pertube %>% group_by(persist_id) %>% arrange(rev(date)) %>% mutate(interval = as.numeric(difftime(date, lag(date))))
data4_pertube <- sqldf("SELECT data3.persist_id, data3.year, data3.month, data3.day, AVG(data3.ic_MgCha) FROM data3 GROUP BY data3.year, data3.month, data3.persist_id")
colnames(data4_pertube) <- c("persist_id", "year", "month", "day", "threemonthlyNPProot")
data4_pertube
colnames(data4_pertube) <- c("persist_id", "year", "month", "day", "threemonthlyNPProot")
data4_pertube$d     <- as.character(paste(data4_pertube$month, data4_pertube$day, data4_pertube$year, sep="/"))
data4_pertube$date  <- as.Date(data4_pertube$d, "%m/%d/%Y")
data4_pertube
data4_pertube <- sqldf("SELECT data4_pertube.* FROM data4_pertube ORDER BY data4_pertube.persist_id, data4_pertube.year, data4_pertube.month, data4_pertube.day ASC")
data4_pertube
data4_pertube %>% group_by(persist_id) %>% arrange(rev(date)) %>% mutate(interval = as.numeric(difftime(date, lag(date))))
data4_pertube %>% group_by(persist_id) %>% arrange(persist_id, rev(date)) %>% mutate(interval = as.numeric(difftime(date, lag(date))))
data4_pertube %>% group_by(persist_id) %>% arrange(persist_id, date) %>% mutate(interval = as.numeric(difftime(date, lag(date))))
data4
data3
data4_pertube %>% group_by(persist_id) %>% arrange(persist_id, date) %>%
mutate(interval = as.numeric(difftime(date, lag(date))),
monthlyNPProot = threemonthlyNPProot/interval * 30) # TODO: change to reflect days per month
data4_pertube %>% group_by(persist_id) %>% arrange(persist_id, date) %>%
mutate(interval = ifelse(is.na(lag(date)), 90, as.numeric(difftime(date, lag(date)))),
monthlyNPProot = threemonthlyNPProot/interval * 30) # TODO: change to reflect days per month
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
source('D:/Documents/Chambasa/GEMcarbon/NPProot_2015.R', echo=TRUE)
roots_acj = NPProot_ic(paste0(datadir,testfile), "ACJ-01")
roots_acj[2]
source("flf_2015.R")
testfile = "Litterfall_ACJ_2013_2014.csv"
flf_acj = flf(paste0(datadir,testfile))
flf_acj = flf(paste0(datadir,testfile), "ACJ-01")
data.flf = paste0(datadir,testfile)
plotname = "ACJ-01"
data.flf = paste0(datadir,testfile)
datadir = "a_readyforupload_db/acj_pan_2015/"
testfile = "Litterfall_ACJ_2013_2014.csv"
data.flf = paste0(datadir,testfile)
plotname = "ACJ-01"
# define each parameter
plotfA = data.flf$plot_code
yearfA = data.flf$year[which(plotname==plotfA)]
monthfA = data.flf$month[which(plotname==plotfA)]
#pointfA = data.flf$litterfall_trap_num[which(plotname==plotfA)]
leaffA = data.flf$leaves_g_per_trap[which(plotname==plotfA)]
branchfA = data.flf$twigs_g_per_trap[which(plotname==plotfA)]
flowerfA = data.flf$flowers_g_per_trap[which(plotname==plotfA)]
fruitfA = data.flf$fruits_g_per_trap[which(plotname==plotfA)]
seedsfA <- NA #data.flf$seeds[which(plotname==plotfA)]
BromfA = data.flf$bromeliads_g_per_trap[which(plotname==plotfA)]
EpiphfA = data.flf$epiphytes_g_per_trap[which(plotname==plotfA)]
otherfA = data.flf$other_g_per_trap[which(plotname==plotfA)]
data.flf <- read.csv(data.flf)
plotfA = data.flf$plot_code
yearfA = data.flf$year[which(plotname==plotfA)]
monthfA = data.flf$month[which(plotname==plotfA)]
#pointfA = data.flf$litterfall_trap_num[which(plotname==plotfA)]
leaffA = data.flf$leaves_g_per_trap[which(plotname==plotfA)]
branchfA = data.flf$twigs_g_per_trap[which(plotname==plotfA)]
flowerfA = data.flf$flowers_g_per_trap[which(plotname==plotfA)]
fruitfA = data.flf$fruits_g_per_trap[which(plotname==plotfA)]
seedsfA <- NA #data.flf$seeds[which(plotname==plotfA)]
BromfA = data.flf$bromeliads_g_per_trap[which(plotname==plotfA)]
EpiphfA = data.flf$epiphytes_g_per_trap[which(plotname==plotfA)]
otherfA = data.flf$other_g_per_trap[which(plotname==plotfA)]
totalfA <- NULL
for (i in 1:length(yearfA)) {
totalfA[i] = sum(leaffA[i], branchfA[i], flowerfA[i], fruitfA[i], seedsfA[i], BromfA[i], EpiphfA[i], otherfA[i], na.rm=T)
}
totalfA[which(totalfA>300)] <- NA   # remove outliers with totalf > 300
totalfA[which(totalfA<0)]   <- NA   # remove implausible totallf (negative litter)
fir_mon = 1
fir_mone = 12
fir_year = min(yearfA, na.rm=T)
fir_yeare = max(yearfA, na.rm=T)
n=1
fir_year
fir_yeare
yearfA
data.flf$year
data.flf$plotname
data.flf$plot_code
plotname = "ACJ"
# define each parameter
plotfA = data.flf$plot_code
yearfA = data.flf$year[which(plotname==plotfA)]
monthfA = data.flf$month[which(plotname==plotfA)]
#pointfA = data.flf$litterfall_trap_num[which(plotname==plotfA)]
leaffA = data.flf$leaves_g_per_trap[which(plotname==plotfA)]
branchfA = data.flf$twigs_g_per_trap[which(plotname==plotfA)]
flowerfA = data.flf$flowers_g_per_trap[which(plotname==plotfA)]
fruitfA = data.flf$fruits_g_per_trap[which(plotname==plotfA)]
seedsfA <- NA #data.flf$seeds[which(plotname==plotfA)]
BromfA = data.flf$bromeliads_g_per_trap[which(plotname==plotfA)]
EpiphfA = data.flf$epiphytes_g_per_trap[which(plotname==plotfA)]
otherfA = data.flf$other_g_per_trap[which(plotname==plotfA)]
totalfA <- NULL
for (i in 1:length(yearfA)) {
totalfA[i] = sum(leaffA[i], branchfA[i], flowerfA[i], fruitfA[i], seedsfA[i], BromfA[i], EpiphfA[i], otherfA[i], na.rm=T)
}
totalfA[which(totalfA>300)] <- NA   # remove outliers with totalf > 300
totalfA[which(totalfA<0)]   <- NA   # remove implausible totallf (negative litter)
fir_mon = 1
fir_mone = 12
fir_year = min(yearfA, na.rm=T)
fir_yeare = max(yearfA, na.rm=T)
n=1
# initialize variables for the loop:
totflfAs <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
totflfAsstd <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
totflfAslen <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
# leaflaifAs <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
seedsfAs <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
seedsfAsstd <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
leafflfAs <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
leafflfAsstd <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
fruitflfAs <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
fruitflfAsstd <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
flowerflfAs <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
flowerflfAsstd <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
branchflfAs <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
branchflfAsstd <- matrix(data=NA, nrow=12, ncol=(fir_yeare-fir_year+1), dimnames=list(c(month.name),fir_year:fir_yeare))
la = (10000/0.25) #*2
for (j in fir_year:fir_yeare) {
m=1
for (i in fir_mon:12) {
ind = which(monthfA==i & yearfA==j)
totflfAs[m,n] = mean(totalfA[ind],na.rm=T)*(la/(2.032*1000000)) # g/ha/month convert to Mg C/ha/month multiply by 0.49 (=1/2.032)
totflfAsstd[m,n] = (sd(totalfA[ind],na.rm=T)*(la/(2.032*1000000)))/sqrt(25)  # should be sqrt(length(totalfA)). This assumes you have 25 litter traps.
# Terhi suggests calculating per litter trap and getting SE per litter trap:
# Calculate MgC/ trap/ collection interval
# loop per litter trap per.
# avg1 <- monthly average per trap over several years = average ((1st collection/ collection interval) , (2st collection/ collection interval)) * number of days in that month
# avg2 <- monthly average per plot by averaging avg1.
# se_avg1 <- sd(avg1)/sqrt(length(avg1)).
# this would provide a unit per day. g / m2/ day.
seedsfAs[m,n] = mean(seedsfA[ind],na.rm=T)*(la/(2.032*1000000))
seedsfAsstd[m,n] = sd(seedsfA[ind],na.rm=T)*(la/(2.032*1000000))/sqrt(25)
leafflfAs[m,n] = mean(leaffA[ind],na.rm=T)*(la/(2.032*1000000))
leafflfAsstd[m,n] = sd(leaffA[ind],na.rm=T)*(la/(2.032*1000000))/sqrt(25)
fruitflfAs[m,n] = mean(fruitfA[ind],na.rm=T)*(la/(2.032*1000000))
fruitflfAsstd[m,n] = (sd(fruitfA[ind],na.rm=T)*(la/(2.032*1000000)))/sqrt(25)
flowerflfAs[m,n] = mean(flowerfA[ind],na.rm=T)*(la/(2.032*1000000))
flowerflfAsstd[m,n] = (sd(flowerfA[ind],na.rm=T)*(la/(2.032*1000000)))/sqrt(25)
branchflfAs[m,n] = mean(branchfA[ind],na.rm=T)*(la/(2.032*1000000))
branchflfAsstd[m,n] = (sd(branchfA[ind],na.rm=T)*(la/(2.032*1000000)))/sqrt(25)
# Add a column for reproductive material
#pointfAa = pointfA[ind]
m=m+1
}
n=n+1
}
totflfAs[which(totflfAs==0)] <- NaN
flf.data.monthly.matrix <- list(
(totflfAs),(totflfAsstd),
(seedsfAs),(seedsfAsstd),
(leafflfAs),(leafflfAsstd),
(fruitflfAs),(fruitflfAsstd),
(flowerflfAs),(flowerflfAsstd),
(branchflfAs),(branchflfAsstd))
names(flf.data.monthly.matrix) <- c("totflfAs","totflfAsstd",
"seedsfAs","seedsfAsstd",
"leafflfAs","leafflfAsstd",
"fruitflfAs","fruitflfAsstd",
"flowerflfAs","flowerflfAsstd",
"branchflfAs","branchflfAsstd")
##Restructure the data (according to time series structure):
Year <- NULL
Month <- NULL
Day <- NULL
for (i in 1:dim(totflfAs)[2]) {
Year[((i-1)*12+1):((i-1)*12+12)] <- (rep(c(min(yearfA,na.rm=T):max(yearfA,na.rm=T))[i],12))
Month[((i-1)*12+1):((i-1)*12+12)] <- (1:12)
Day[((i-1)*12+1):((i-1)*12+12)] <- rep(NA,12)
}
flf.data.monthly.ts <- data.frame(Year, Month, Day,
c(totflfAs),c(totflfAsstd),
c(seedsfAs),c(seedsfAsstd),
c(leafflfAs),c(leafflfAsstd),
c(fruitflfAs),c(fruitflfAsstd),
c(flowerflfAs),c(flowerflfAsstd),
c(branchflfAs),c(branchflfAsstd))
colnames(flf.data.monthly.ts) <- c("Year","Month","Day",
"totflfAs","totflfAsstd",
"seedsfAs","seedsfAsstd",
"leafflfAs","leafflfAsstd",
"fruitflfAs","fruitflfAsstd",
"flowerflfAs","flowerflfAsstd",
"branchflfAs","branchflfAsstd")
## Plotroutine, triggered by argument 'plotit=T'
flf.data.monthly.ts$date <- strptime(paste(as.character(flf.data.monthly.ts$Year), as.character(flf.data.monthly.ts$Month), as.character(15), sep="-"), format="%Y-%m-%d")
flf.data.monthly.ts$yearmonth <- as.yearmon(flf.data.monthly.ts$date)
ret
flf.data.monthly.matrix
flf.data.monthly.ts
flf_acj
flf_acj = flf(paste0(datadir,testfile), "ACJ")
source("flf_2015.R")
testfile = "Litterfall_ACJ_2013_2014.csv"
flf_acj = flf(paste0(datadir,testfile), "ACJ")
source("flf_2015.R")
testfile = "Litterfall_ACJ_2013_2014.csv"
flf_acj = flf(paste0(datadir,testfile), "ACJ")
flf_acj
source("flf_2015.R")
flf_acj = flf(paste0(datadir,testfile), "ACJ")
source("flf_2015.R")
flf_acj = flf(paste0(datadir,testfile), "ACJ")
branchflfAsstd
branchflfAs
flf_acj
flf_data = read.csv(paste0(datadir,testfile))
source("flf_2015.R")
